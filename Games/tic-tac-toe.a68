MODE POINTS = STRUCT( INT x, o );
MODE POS = STRUCT( INT x, y );
MODE SIZE = STRUCT( INT w, h );
MODE SIZES = STRUCT( INT x, y, w, h );

SIZE block = ( 7, 3 );
SIZE screen := (curses columns, curses lines);
SIZES canvas := (10, 2, curses columns, curses lines);

x OF canvas := ENTIER((w OF canvas / 2) - ((w OF block * 3 + 2) / 2));
y OF canvas := ENTIER((h OF canvas / 2) - ((h OF block * 3 + 2) / 2)) - 2;

PROC int in list = (INT item, FLEX [] INT list) BOOL: (
  BOOL res := FALSE;

  FOR i TO UPB list DO
    IF list[i] = item THEN
      res := TRUE;
      GO TO end
    FI
  OD;
  end:

  res
);


PROC curses print string = (POS pos, STRING str) VOID: (
  curses move(y OF pos, x OF pos);

  FOR i TO UPB str DO
    curses putchar( str[i] )
  OD
);

PROC repeat string = (STRING str, INT times) STRING: (
  STRING res := "";

  FOR i TO times DO
    res +:= str
  OD;

  res
);

PROC draw canvas = ([] STRING values, [] INT won values) VOID: (
  # vertical lines #
  FOR i TO 3 * h OF block + 2 DO
    curses print string(
      (x OF canvas, i + y OF canvas),
      repeat string(" ", w OF block) + "|" + repeat string(" ", w OF block) + "|" + repeat string(" ", w OF block)
    )
  OD;

  # horizontal lines #
  FOR i TO 2 DO
    curses print string(
      (x OF canvas, i * h OF block + i + y OF canvas),
      repeat string("-", w OF block * 3 + 2)
    )
  OD;

  # values #
  FOR i TO 3 DO
    curses white;
    IF int in list((i - 1) * 3 + 1, won values) THEN
      curses blue
    FI;

    curses print string(
      (
        x OF canvas + ENTIER(w OF block / 2),
        y OF canvas + ENTIER(h OF block / 2) + (h OF block * (i - 1) + ((i - 1) * 2) - (i - 1)) + 1
      ),
      values[(i - 1) * 3 + 1]
    );

    curses white;
    IF int in list((i - 1) * 3 + 1 + 1, won values) THEN
      curses blue
    FI;

    curses print string(
      (
        x OF canvas + w OF block + ENTIER(w OF block / 2) * 2 - 2,
        y OF canvas + ENTIER(h OF block / 2) + (h OF block * (i - 1) + ((i - 1) * 2) - (i - 1)) + 1
      ),
      values[(i - 1) * 3 + 1 + 1]
    );

    curses white;
    IF int in list((i - 1) * 3 + 1 + 2, won values) THEN
      curses blue
    FI;

    curses print string(
      (
        x OF canvas + w OF block * 2 + ENTIER(w OF block / 2) * 3 - 4,
        y OF canvas + ENTIER(h OF block / 2) + (h OF block * (i - 1) + ((i - 1) * 2) - (i - 1)) + 1
      ),
      values[(i - 1) * 3 + 1 + 2]
    )
  OD;

  curses refresh
);

PROC draw won screen = (POINTS points) VOID: (
  [ 1:10 ] STRING panel := (
    "|--------------------------------------|",
    "|                                      |",
    "|           CONGRATULATIONS            |",
    "|                                      |",
    "|       X = " + whole(x OF points, 0) + "                           |",
    "|       O = " + whole(o OF points, 0) + "                           |",
    "|                                      |",
    "|                                      |",
    "|                                      |",
    "|--------------------------------------|"
  );

  FOR i TO UPB panel DO
    curses print string(
      (
        w OF screen - UPB panel[i] - 1,
        ENTIER(h OF screen / 2 - UPB panel / 2) + i
      ),
      panel[i]
    )
  OD;
  curses refresh
);

PROC win = ([] STRING values) [] INT: (
  FLEX [ 0 ] INT res := ();

  # --- #
  IF   values[1] /= "" AND values[1] = values[2] AND values[2] = values[3] THEN res := (1, 2, 3)
  ELIF values[4] /= "" AND values[4] = values[5] AND values[5] = values[6] THEN res := (4, 5, 6)
  ELIF values[7] /= "" AND values[7] = values[8] AND values[8] = values[9] THEN res := (7, 8, 9)

  # | #
  ELIF values[1] /= "" AND values[1] = values[4] AND values[4] = values[7] THEN res := (1, 4, 7)
  ELIF values[2] /= "" AND values[2] = values[5] AND values[5] = values[8] THEN res := (2, 5, 8)
  ELIF values[3] /= "" AND values[3] = values[6] AND values[6] = values[9] THEN res := (3, 6, 9)

  # \ #
  ELIF values[1] /= "" AND values[1] = values[5] AND values[5] = values[9] THEN res := (1, 5, 9)

  # / #
  ELIF values[3] /= "" AND values[3] = values[5] AND values[5] = values[7] THEN res := (3, 5, 7)
  FI;

  res
);

PROC main = (REF STRING player, REF [] STRING values, REF POINTS points) VOID: (
  BOOL quit := FALSE;
  FLEX [ 0 ] INT won := ();
  CHAR player := "O";

  curses print string((2, 1), "q to quit, and r to refresh.");

  curses print string((2, h OF canvas - 3), "Player: " + player);
  curses print string((2, h OF canvas - 2), "Points: X: " + whole(x OF points, 0) + " - O: " + whole(o OF points, 0));

  WHILE NOT quit AND UPB won = 0 DO
    CHAR ch = curses get char;
    INT ch ascii = ABS ch;

    IF ch /= "" THEN
      BOOL valid := FALSE;

      IF   ch ascii = 49 AND values[1] = "" THEN valid := TRUE; values[1] := player
      ELIF ch ascii = 50 AND values[2] = "" THEN valid := TRUE; values[2] := player
      ELIF ch ascii = 51 AND values[3] = "" THEN valid := TRUE; values[3] := player
      ELIF ch ascii = 52 AND values[4] = "" THEN valid := TRUE; values[4] := player
      ELIF ch ascii = 53 AND values[5] = "" THEN valid := TRUE; values[5] := player
      ELIF ch ascii = 54 AND values[6] = "" THEN valid := TRUE; values[6] := player
      ELIF ch ascii = 55 AND values[7] = "" THEN valid := TRUE; values[7] := player
      ELIF ch ascii = 56 AND values[8] = "" THEN valid := TRUE; values[8] := player
      ELIF ch ascii = 57 AND values[9] = "" THEN valid := TRUE; values[9] := player
      ELIF ch = "r" THEN
        start game;
        GO TO end
      ELIF ch = "q" THEN
        quit := TRUE
      FI;

      IF valid THEN
        player := (player = "O" | "X" | "O");

        curses print string((1, h OF canvas - 3), "Player: " + player);
        curses print string((1, h OF canvas - 2), "Points: X: " + whole(x OF points, 0) + " - O: " + whole(o OF points, 0));

        IF NOT quit THEN
          won := win(values)
        FI
      FI;

      draw canvas(values, ())
    FI
  OD;

  IF UPB won > 0 THEN
    player := (player = "O" | "X" | "O");

    IF player = "O" THEN
      o OF points +:= 1
    ELSE
      x OF points +:= 1
    FI;

    draw canvas(values, won);
    VOID( sleep(2) );
    draw won screen(points);
    VOID( sleep(5) );

    start game
  FI;

  end:
  ""
);

PROC start game = VOID: (
  [ 1:9 ] STRING values := ("", "", "", "", "", "", "", "", "");

  curses clear;
  curses white;

  draw canvas(values, ());

  main(player, values, points)
);

POINTS points := (0, 0);
STRING player := "O";

curses start;
start game;

curses end
